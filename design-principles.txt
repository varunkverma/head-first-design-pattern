->  Identify the aspects of your application that vary and separate them from what stays the same.
        -  Take the parts that vary and encapsulate them, so that later you can alter or extend the parts that vary without afftecting those that don't.
        -  The result would be a fewer unintented consequences from code changes and more flexibility in your system.

->  Program to an interface, not an implementation.
        -  "Program to an interface" really means "Program to a supertype".
        -  The point is to expploit polymorphism by programming to a supertype so that the actual runtime object isn't locked into the code.
        -  And we could rephrase "program to a supertype" as "the declared type of the variables should be a supertype, usually an abstract class or interface, so that the objects assigned to those variables can be of any concrete implementation of the supertype, whcih means the class declaring them doesn't have to know about the actual object types.

->  Favor composition over inheritance.
        -  Creating systems using composition gives you a lot more of flexibility. 
        -  Not only does it let you encapsulate a family of algorithms into their own set of classes, but it also lets you "change behavior at runtime" as long as the object you're composing with implements the correct behavior interface.
        - Composition is used in many design patterns.

->  Strive for loosely coupled designs between objects that interact.
        - Loosley coupled designs allow us to build flexible OO systems that can handle change because they minimize the interdependency between objects.

->  The Open-Closed Principle: Classes should be open for extension, but closed for modification.
        -  Our goal is to allow classes to be easily extended to incorporate new behavior without modifying exsiting code.
        -  This can be achieved by implementing designs that are resilient to change and flexible enough to take on new functionality to meet changing requirements. 