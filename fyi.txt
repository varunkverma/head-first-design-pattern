->  Someone has already solved your problem.
    *   Exploit the wisdom and lessons by other developers who've been down the same design problem road and survived the trip.

->  The best way to use patterns is to load your brain with them and then recognize places in your designs and existing applications where you can apply them. Instead of code reuse, with patterns you get experience reuse.

->  All patterns provide a way to let some part of a system vary independently of all other parts.

-> The prinicples and patterns can be applied at any stage of the development lifecycle.

->  The promise of the object-oriented way is reuse.

->  We always spend more time maintaining and changing software than on initial development.

->  Design Patterns give you a shared vocabulary with other developers. Once you've got the vocabulary, you can more easilty communicate with other developers and inspire those who don't know patterns to start learning them. It also elevates you thinking about architecture by letting you "think at the pattern level", not the nitty-gritty object level.
    When you communicate with another developer or your team using patterns, you are communicating not just a pattern name but a whole set of qualities, characteristics, and constraints that the pattern represents.
    
->  Design patterns don't go directly into your code, they first go into your Brain. Once you've loaded your brain with a good working knowledge of patterns, you can then start to apply them to your new designs, and rework your old code when you find it's degrading into an inflexible mess. 
